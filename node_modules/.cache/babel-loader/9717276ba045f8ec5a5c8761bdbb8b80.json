{"ast":null,"code":"var _jsxFileName = \"/home/pbretones/Documentos/PBretones/tpdc/proyectofinal/src/components/MusicPlayer/LibrarySong.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LibrarySong = ({\n  song,\n  songs,\n  setCurrentSong,\n  CurrentSong,\n  audioRef,\n  isPlaying,\n  id,\n  setSongs\n}) => {\n  const songSelectHandler = async () => {\n    await setCurrentSong(song);\n    setCurrentSong(CurrentSong.active === true);\n    const newSongs = songs.map(song => {\n      if (song._id === id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs); // is it playing?\n\n    if (isPlaying) {\n      audioRef.current.play();\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: songSelectHandler,\n    className: `librarySong ${song.active ? 'selected' : \"\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"songDescription\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: song.cover,\n        alt: \"portada\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: song.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_c = LibrarySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"LibrarySong\");","map":{"version":3,"sources":["/home/pbretones/Documentos/PBretones/tpdc/proyectofinal/src/components/MusicPlayer/LibrarySong.js"],"names":["React","LibrarySong","song","songs","setCurrentSong","CurrentSong","audioRef","isPlaying","id","setSongs","songSelectHandler","active","newSongs","map","_id","current","play","cover","name","artist"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,cAAf;AAA+BC,EAAAA,WAA/B;AAA4CC,EAAAA,QAA5C;AAAsDC,EAAAA,SAAtD;AAAiEC,EAAAA,EAAjE;AAAqEC,EAAAA;AAArE,CAAD,KAAqF;AAE5G,QAAMC,iBAAiB,GAAG,YAAY;AAClC,UAAMN,cAAc,CAACF,IAAD,CAApB;AACAE,IAAAA,cAAc,CAACC,WAAW,CAACM,MAAZ,KAAuB,IAAxB,CAAd;AAEA,UAAMC,QAAQ,GAAGT,KAAK,CAACU,GAAN,CAAWX,IAAD,IAAU;AACjC,UAAIA,IAAI,CAACY,GAAL,KAAaN,EAAjB,EAAqB;AAEjB,eAAO,EACH,GAAGN,IADA;AAEHS,UAAAA,MAAM,EAAE;AAFL,SAAP;AAIH,OAND,MAMO;AACH,eAAO,EACH,GAAGT,IADA;AAEHS,UAAAA,MAAM,EAAE;AAFL,SAAP;AAIH;AAEJ,KAdgB,CAAjB;AAeAF,IAAAA,QAAQ,CAACG,QAAD,CAAR,CAnBkC,CAqBlC;;AACA,QAAIL,SAAJ,EAAe;AAAED,MAAAA,QAAQ,CAACS,OAAT,CAAiBC,IAAjB;AAAyB;;AAAA;AAE7C,GAxBD;;AA0BA,sBACI;AAAK,IAAA,OAAO,EAAEN,iBAAd;AAAiC,IAAA,SAAS,EAAG,eAAcR,IAAI,CAACS,MAAL,GAAc,UAAd,GAA2B,EAAG,EAAzF;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACI;AAAK,QAAA,GAAG,EAAET,IAAI,CAACe,KAAf;AAAsB,QAAA,GAAG,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAKf,IAAI,CAACgB;AAAV;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBAAKhB,IAAI,CAACiB;AAAV;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CArCM;KAAMlB,W","sourcesContent":["import React from 'react';\n\n\nexport const LibrarySong = ({ song, songs, setCurrentSong, CurrentSong, audioRef, isPlaying, id, setSongs }) => {\n\n    const songSelectHandler = async () => {\n        await setCurrentSong(song);\n        setCurrentSong(CurrentSong.active === true);\n\n        const newSongs = songs.map((song) => {\n            if (song._id === id) {\n\n                return {\n                    ...song,\n                    active: true,\n                }\n            } else {\n                return {\n                    ...song,\n                    active: false\n                }\n            }\n\n        });\n        setSongs(newSongs);\n\n        // is it playing?\n        if (isPlaying) { audioRef.current.play() };\n\n    }\n\n    return (\n        <div onClick={songSelectHandler} className={`librarySong ${song.active ? 'selected' : \"\"}`} >\n            <div className=\"songDescription\">\n                <img src={song.cover} alt=\"portada\"></img>\n                <h3>{song.name}</h3>\n                <h4>{song.artist}</h4>\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}