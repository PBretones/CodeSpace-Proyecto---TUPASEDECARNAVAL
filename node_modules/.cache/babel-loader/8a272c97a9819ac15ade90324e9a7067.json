{"ast":null,"code":"var _jsxFileName = \"/home/pbretones/Documentos/PBretones/tpdc/proyectofinal/src/components/MusicPlayer/MusicPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport { Song } from './Song';\nimport { Player } from './Player';\nimport { Library } from './Library';\nimport { Nav } from './Nav';\nimport { Data } from '../../data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MusicPlayer = () => {\n  _s();\n\n  // we use Ref\n  const audioRef = useRef(null); // States\n  // State of song being played\n\n  const [songs, setSongs] = useState(Data());\n  const [currentSong, setCurrentSong] = useState(songs[1]);\n  const [isPlaying, setIsPlaying] = useState(false); //State of song time & duration\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration; // Calculate Percentage\n\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round(roundedCurrent / roundedDuration * 100);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation\n    });\n  };\n\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n\n    if (isPlaying) {\n      audioRef.current.play();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tester\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      setSongs: setSongs,\n      setCurrentSong: setCurrentSong,\n      songs: songs,\n      setSongInfo: setSongInfo,\n      songInfo: songInfo,\n      audioRef: audioRef,\n      setIsPlaying: setIsPlaying,\n      isPlaying: isPlaying,\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus,\n      setSongs: setSongs,\n      isPlaying: isPlaying,\n      audioRef: audioRef,\n      songs: songs,\n      setCurrentSong: setCurrentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onEnded: songEndHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MusicPlayer, \"lrLsf5Nt4mRaiuP97HKC0eKu7Lk=\");\n\n_c = MusicPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"sources":["/home/pbretones/Documentos/PBretones/tpdc/proyectofinal/src/components/MusicPlayer/MusicPlayer.js"],"names":["React","useState","useRef","Song","Player","Library","Nav","Data","MusicPlayer","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","animationPercentage","libraryStatus","setLibraryStatus","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","roundedDuration","animation","songEndHandler","currentIndex","findIndex","song","id","length","play","audio"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,GAAT,QAAoB,OAApB;AAEA,SAASC,IAAT,QAAqB,YAArB;;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAE7B;AACA,QAAMC,QAAQ,GAAGP,MAAM,CAAC,IAAD,CAAvB,CAH6B,CAI7B;AACA;;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAACM,IAAI,EAAL,CAAlC;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAACS,KAAK,CAAC,CAAD,CAAN,CAA9C;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C,CAR6B,CAU7B;;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC;AACrCiB,IAAAA,WAAW,EAAE,CADwB;AAErCC,IAAAA,QAAQ,EAAE,CAF2B;AAGrCC,IAAAA,mBAAmB,EAAE;AAHgB,GAAD,CAAxC;AAKA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCrB,QAAQ,CAAC,KAAD,CAAlD;;AACA,QAAMsB,iBAAiB,GAAIC,CAAD,IAAO;AAC7B,UAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASR,WAAzB;AACA,UAAMC,QAAQ,GAAGK,CAAC,CAACE,MAAF,CAASP,QAA1B,CAF6B,CAG7B;;AACA,UAAMQ,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAvB;AACA,UAAMK,eAAe,GAAGF,IAAI,CAACC,KAAL,CAAWV,QAAX,CAAxB;AACA,UAAMY,SAAS,GAAGH,IAAI,CAACC,KAAL,CAAYF,cAAc,GAAGG,eAAlB,GAAqC,GAAhD,CAAlB;AAEAb,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeE,MAAAA,WAAW,EAAEO,OAA5B;AAAqCN,MAAAA,QAArC;AAA+CC,MAAAA,mBAAmB,EAAEW;AAApE,KAAD,CAAX;AACH,GATD;;AAWA,QAAMC,cAAc,GAAG,YAAY;AAC/B,QAAIC,YAAY,GAAGvB,KAAK,CAACwB,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYxB,WAAW,CAACwB,EAAlD,CAAnB;AACA,UAAMvB,cAAc,CAACH,KAAK,CAAC,CAACuB,YAAY,GAAG,CAAhB,IAAqBvB,KAAK,CAAC2B,MAA5B,CAAN,CAApB;;AACA,QAAIvB,SAAJ,EAAe;AAAEL,MAAAA,QAAQ,CAACgB,OAAT,CAAiBa,IAAjB;AAAyB;AAE7C,GALD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACI,QAAC,GAAD;AAAK,MAAA,aAAa,EAAEjB,aAApB;AAAmC,MAAA,gBAAgB,EAAEC;AAArD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AAAM,MAAA,WAAW,EAAEV;AAAnB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAED,QAAlB;AAA4B,MAAA,cAAc,EAAEE,cAA5C;AAA4D,MAAA,KAAK,EAAEH,KAAnE;AAA0E,MAAA,WAAW,EAAEO,WAAvF;AAAoG,MAAA,QAAQ,EAAED,QAA9G;AAAwH,MAAA,QAAQ,EAAEP,QAAlI;AAA4I,MAAA,YAAY,EAAEM,YAA1J;AAAwK,MAAA,SAAS,EAAED,SAAnL;AAA8L,MAAA,WAAW,EAAEF;AAA3M;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,OAAD;AAAS,MAAA,aAAa,EAAES,aAAxB;AAAuC,MAAA,gBAAgB,EAAEC,gBAAzD;AAA2E,MAAA,QAAQ,EAAEX,QAArF;AAA+F,MAAA,SAAS,EAAEG,SAA1G;AAAqH,MAAA,QAAQ,EAAEL,QAA/H;AAAyI,MAAA,KAAK,EAAEC,KAAhJ;AAAuJ,MAAA,cAAc,EAAEG;AAAvK;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAO,MAAA,OAAO,EAAEmB,cAAhB;AAAgC,MAAA,gBAAgB,EAAET,iBAAlD;AAAqE,MAAA,YAAY,EAAEA,iBAAnF;AAAsG,MAAA,GAAG,EAAEd,QAA3G;AAAqH,MAAA,GAAG,EAAEG,WAAW,CAAC2B;AAAtI;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA5CM;;GAAM/B,W;;KAAAA,W","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Song } from './Song';\nimport { Player } from './Player';\nimport { Library } from './Library';\nimport { Nav } from './Nav';\n\nimport { Data } from '../../data';\n\n\nexport const MusicPlayer = () => {\n\n    // we use Ref\n    const audioRef = useRef(null);\n    // States\n    // State of song being played\n    const [songs, setSongs] = useState(Data());\n    const [currentSong, setCurrentSong] = useState(songs[1]);\n    const [isPlaying, setIsPlaying] = useState(false);\n\n    //State of song time & duration\n    const [songInfo, setSongInfo] = useState({\n        currentTime: 0,\n        duration: 0,\n        animationPercentage: 0,\n    });\n    const [libraryStatus, setLibraryStatus] = useState(false);\n    const timeUpdateHandler = (e) => {\n        const current = e.target.currentTime;\n        const duration = e.target.duration;\n        // Calculate Percentage\n        const roundedCurrent = Math.round(current);\n        const roundedDuration = Math.round(duration);\n        const animation = Math.round((roundedCurrent / roundedDuration) * 100);\n\n        setSongInfo({ ...songInfo, currentTime: current, duration, animationPercentage: animation })\n    };\n\n    const songEndHandler = async () => {\n        let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n        await setCurrentSong(songs[(currentIndex + 1) % songs.length])\n        if (isPlaying) { audioRef.current.play() }\n\n    }\n\n    return (\n        <div className=\"tester\">\n            <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n            <Song currentSong={currentSong} />\n            <Player setSongs={setSongs} setCurrentSong={setCurrentSong} songs={songs} setSongInfo={setSongInfo} songInfo={songInfo} audioRef={audioRef} setIsPlaying={setIsPlaying} isPlaying={isPlaying} currentSong={currentSong} />\n            <Library libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} setSongs={setSongs} isPlaying={isPlaying} audioRef={audioRef} songs={songs} setCurrentSong={setCurrentSong} />\n            <audio onEnded={songEndHandler} onLoadedMetadata={timeUpdateHandler} onTimeUpdate={timeUpdateHandler} ref={audioRef} src={currentSong.audio}></audio>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}