{"ast":null,"code":"var _jsxFileName = \"/home/pbretones/Documentos/PBretones/tpdc/proyectofinal/src/components/MusicPlayer/Player.js\";\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlayCircle, faAngleLeft, faAngleRight, faPauseCircle } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Player = ({\n  audioRef,\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setSongInfo,\n  songInfo,\n  songs,\n  setCurrentSong,\n  setSongs\n}) => {\n  // Format Time\n  const getTime = time => {\n    return Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2);\n  }; //Event Handlers\n\n\n  const activeLibraryHandler = nextOrPrevious => {\n    const newSongs = songs.map(song => {\n      if (song.id === nextOrPrevious.id) {\n        return { ...song,\n          active: true\n        };\n      } else {\n        return { ...song,\n          active: false\n        };\n      }\n    });\n    setSongs(newSongs);\n  };\n\n  const playSongHandler = () => {\n    audioRef.current.play();\n\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying);\n    }\n  };\n\n  const dragHandler = e => {\n    audioRef.current.currentTime = e.target.value;\n    setSongInfo({ ...songInfo,\n      currentTime: e.target.value\n    });\n  };\n\n  const skipTrackHandler = async flow => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n\n    if (flow === 'skip-forward') {\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex + 1) % songs.length]); // We avoid using useEffect putting it here\n    }\n\n    if (flow === 'skip-back') {\n      if ((currentIndex - 1) % songs.length === -1) {\n        await setCurrentSong(songs[songs.length - 1]);\n        activeLibraryHandler(songs[songs.length - 1]); // We avoid using useEffect putting it here\n\n        if (isPlaying) {\n          audioRef.current.play();\n        }\n\n        return;\n      }\n\n      await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex - 1) % songs.length]); // We avoid using useEffect putting it here\n    }\n\n    if (isPlaying) {\n      audioRef.current.play();\n    }\n  };\n\n  const trackAnimation = {\n    transform: `translateX(${songInfo.animationPercentage}%)`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeControl\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: `linear-gradient(to right, )`\n        },\n        className: \"track\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: dragHandler,\n          min: 0,\n          max: songInfo.duration,\n          value: songInfo.currentTime,\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: trackAnimation,\n          className: \"animateTrack\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: songInfo.duration ? getTime(songInfo.duration) : \"0:00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playControl\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrackHandler('skip-back'),\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playSongHandler,\n        className: \"play\",\n        size: \"3x\",\n        icon: isPlaying ? faPauseCircle : faPlayCircle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrackHandler('skip-forward'),\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_c = Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/home/pbretones/Documentos/PBretones/tpdc/proyectofinal/src/components/MusicPlayer/Player.js"],"names":["React","FontAwesomeIcon","faPlayCircle","faAngleLeft","faAngleRight","faPauseCircle","Player","audioRef","currentSong","isPlaying","setIsPlaying","setSongInfo","songInfo","songs","setCurrentSong","setSongs","getTime","time","Math","floor","slice","activeLibraryHandler","nextOrPrevious","newSongs","map","song","id","active","playSongHandler","current","play","pause","dragHandler","e","currentTime","target","value","skipTrackHandler","flow","currentIndex","findIndex","length","trackAnimation","transform","animationPercentage","background","duration"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlayCircle, faAngleLeft, faAngleRight, faPauseCircle } from '@fortawesome/free-solid-svg-icons';\n\n\nexport const Player = ({\n    audioRef, currentSong, isPlaying, setIsPlaying,\n    setSongInfo, songInfo, songs, setCurrentSong, setSongs }) => {\n\n\n    // Format Time\n\n    const getTime = (time) => {\n        return (\n            Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\n        )\n    }\n\n    //Event Handlers\n    const activeLibraryHandler = (nextOrPrevious) => {\n        const newSongs = songs.map((song) => {\n            if (song.id === nextOrPrevious.id) {\n\n                return {\n                    ...song,\n                    active: true,\n                }\n            } else {\n                return {\n                    ...song,\n                    active: false\n                };\n            }\n\n        });\n\n        setSongs(newSongs);\n    }\n\n    const playSongHandler = () => {\n        audioRef.current.play();\n        if (isPlaying) {\n            audioRef.current.pause();\n            setIsPlaying(!isPlaying);\n\n        } else {\n            audioRef.current.play();\n            setIsPlaying(!isPlaying);\n        }\n    }\n\n\n    const dragHandler = (e) => {\n        audioRef.current.currentTime = e.target.value;\n        setSongInfo({ ...songInfo, currentTime: e.target.value });\n    }\n\n\n    const skipTrackHandler = async (flow) => {\n\n        let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n        if (flow === 'skip-forward') {\n            await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n            activeLibraryHandler(songs[(currentIndex + 1) % songs.length]); // We avoid using useEffect putting it here\n        }\n        if (flow === 'skip-back') {\n            if ((currentIndex - 1) % songs.length === -1) {\n                await setCurrentSong(songs[songs.length - 1]);\n                activeLibraryHandler(songs[songs.length - 1]); // We avoid using useEffect putting it here\n                if (isPlaying) { audioRef.current.play() }\n                return;\n            }\n            await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n            activeLibraryHandler(songs[(currentIndex - 1) % songs.length]); // We avoid using useEffect putting it here\n        }\n        if (isPlaying) { audioRef.current.play() }\n    };\n\n    const trackAnimation = {\n        transform: `translateX(${songInfo.animationPercentage}%)`\n    }\n\n    return (\n        <div className=\"player\">\n            <div className=\"timeControl\">\n\n                <p>{getTime(songInfo.currentTime)}</p>\n                <div style={{ background: `linear-gradient(to right, )` }} className=\"track\">{/* ${currentSong.color[0]},${currentSong.color[1]} */}\n                    <input onChange={dragHandler} min={0} max={songInfo.duration} value={songInfo.currentTime} type=\"range\" />\n                    <div style={trackAnimation} className=\"animateTrack\"></div>\n                </div>\n                <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\n            </div>\n            <div className=\"playControl\">\n                <FontAwesomeIcon onClick={() => skipTrackHandler('skip-back')} className=\"skip-back\" size=\"2x\" icon={faAngleLeft} />\n                <FontAwesomeIcon onClick={playSongHandler} className=\"play\" size=\"3x\" icon={isPlaying ? faPauseCircle : faPlayCircle} />\n                <FontAwesomeIcon onClick={() => skipTrackHandler('skip-forward')} className=\"skip-forward\" size=\"2x\" icon={faAngleRight} />\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}