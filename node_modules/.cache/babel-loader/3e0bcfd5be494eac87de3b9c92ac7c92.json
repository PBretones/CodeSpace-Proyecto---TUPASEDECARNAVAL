{"ast":null,"code":"var _jsxFileName = \"/home/pbretones/Documentos/PBretones/tpdc/proyectofinal/src/components/MusicPlayer/MusicPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Song } from './Song';\nimport { Player } from './Player';\nimport { Library } from './Library';\nimport { Nav } from './Nav';\nimport { addAudio, deleteAudio, getAudios } from '../../helpers';\nimport { Data } from '../../data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MusicPlayer = () => {\n  _s();\n\n  // we use Ref\n  const audioRef = useRef(null); // States\n  // State of song being played\n\n  const [songs, setSongs] = useState([]);\n  const [currentSong, setCurrentSong] = useState(songs); // 1 to 0\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [load, setLoad] = useState(false); //State of song time & duration\n\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n  useEffect(() => {\n    setSongs(myAudio());\n  }, []);\n\n  const myAudio = () => {\n    if (typeof window !== \"undefined\") {\n      if (localStorage.getItem(\"audios\")) {\n        return JSON.parse(localStorage.getItem(\"audios\"));\n      }\n    }\n\n    return [];\n  };\n\n  console.log(currentSong);\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration; // Calculate Percentage\n\n    const roundedCurrent = Math.round(current);\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round(roundedCurrent / roundedDuration * 100);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation\n    });\n  };\n\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n\n    if (isPlaying) {\n      audioRef.current.play();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tester\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      setSongs: setSongs,\n      setCurrentSong: setCurrentSong,\n      songs: songs,\n      setSongInfo: setSongInfo,\n      songInfo: songInfo,\n      audioRef: audioRef,\n      setIsPlaying: setIsPlaying,\n      isPlaying: isPlaying,\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus,\n      setSongs: setSongs,\n      isPlaying: isPlaying,\n      audioRef: audioRef,\n      songs: songs,\n      setCurrentSong: setCurrentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onEnded: songEndHandler,\n      onLoadedMetadata: timeUpdateHandler,\n      onTimeUpdate: timeUpdateHandler,\n      ref: audioRef,\n      src: songs[0].mp3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MusicPlayer, \"lrMLMcLaMT+B8j1bRTAn0kcJS5A=\");\n\n_c = MusicPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"sources":["/home/pbretones/Documentos/PBretones/tpdc/proyectofinal/src/components/MusicPlayer/MusicPlayer.js"],"names":["React","useState","useRef","useEffect","Song","Player","Library","Nav","addAudio","deleteAudio","getAudios","Data","MusicPlayer","audioRef","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","load","setLoad","songInfo","setSongInfo","currentTime","duration","animationPercentage","libraryStatus","setLibraryStatus","myAudio","window","localStorage","getItem","JSON","parse","console","log","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","roundedDuration","animation","songEndHandler","currentIndex","findIndex","song","id","length","play","mp3"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,eAAjD;AACA,SAASC,IAAT,QAAqB,YAArB;;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAE7B;AACA,QAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAD,CAAvB,CAH6B,CAI7B;AACA;;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAACa,KAAD,CAA9C,CAP6B,CAO0B;;AACvD,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACmB,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,KAAD,CAAhC,CAT6B,CAW7B;;AACA,QAAM,CAACqB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC;AACrCuB,IAAAA,WAAW,EAAE,CADwB;AAErCC,IAAAA,QAAQ,EAAE,CAF2B;AAGrCC,IAAAA,mBAAmB,EAAE;AAHgB,GAAD,CAAxC;AAKA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoC3B,QAAQ,CAAC,KAAD,CAAlD;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,QAAQ,CAACc,OAAO,EAAR,CAAR;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,OAAO,GAAG,MAAM;AAClB,QAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,UAAIC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAJ,EAAoC;AAChC,eAAOC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAX,CAAP;AACH;AACJ;;AACD,WAAO,EAAP;AACH,GAPD;;AAQAG,EAAAA,OAAO,CAACC,GAAR,CAAYpB,WAAZ;;AACA,QAAMqB,iBAAiB,GAAIC,CAAD,IAAO;AAC7B,UAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAAShB,WAAzB;AACA,UAAMC,QAAQ,GAAGa,CAAC,CAACE,MAAF,CAASf,QAA1B,CAF6B,CAG7B;;AACA,UAAMgB,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAvB;AACA,UAAMK,eAAe,GAAGF,IAAI,CAACC,KAAL,CAAWlB,QAAX,CAAxB;AACA,UAAMoB,SAAS,GAAGH,IAAI,CAACC,KAAL,CAAYF,cAAc,GAAGG,eAAlB,GAAqC,GAAhD,CAAlB;AAEArB,IAAAA,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAeE,MAAAA,WAAW,EAAEe,OAA5B;AAAqCd,MAAAA,QAArC;AAA+CC,MAAAA,mBAAmB,EAAEmB;AAApE,KAAD,CAAX;AACH,GATD;;AAWA,QAAMC,cAAc,GAAG,YAAY;AAC/B,QAAIC,YAAY,GAAGjC,KAAK,CAACkC,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYlC,WAAW,CAACkC,EAAlD,CAAnB;AACA,UAAMjC,cAAc,CAACH,KAAK,CAAC,CAACiC,YAAY,GAAG,CAAhB,IAAqBjC,KAAK,CAACqC,MAA5B,CAAN,CAApB;;AACA,QAAIjC,SAAJ,EAAe;AAAEL,MAAAA,QAAQ,CAAC0B,OAAT,CAAiBa,IAAjB;AAAyB;AAG7C,GAND;;AASA,sBACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACI,QAAC,GAAD;AAAK,MAAA,aAAa,EAAEzB,aAApB;AAAmC,MAAA,gBAAgB,EAAEC;AAArD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AAAM,MAAA,WAAW,EAAEZ;AAAnB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,MAAD;AAAQ,MAAA,QAAQ,EAAED,QAAlB;AAA4B,MAAA,cAAc,EAAEE,cAA5C;AAA4D,MAAA,KAAK,EAAEH,KAAnE;AAA0E,MAAA,WAAW,EAAES,WAAvF;AAAoG,MAAA,QAAQ,EAAED,QAA9G;AAAwH,MAAA,QAAQ,EAAET,QAAlI;AAA4I,MAAA,YAAY,EAAEM,YAA1J;AAAwK,MAAA,SAAS,EAAED,SAAnL;AAA8L,MAAA,WAAW,EAAEF;AAA3M;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,OAAD;AAAS,MAAA,aAAa,EAAEW,aAAxB;AAAuC,MAAA,gBAAgB,EAAEC,gBAAzD;AAA2E,MAAA,QAAQ,EAAEb,QAArF;AAA+F,MAAA,SAAS,EAAEG,SAA1G;AAAqH,MAAA,QAAQ,EAAEL,QAA/H;AAAyI,MAAA,KAAK,EAAEC,KAAhJ;AAAuJ,MAAA,cAAc,EAAEG;AAAvK;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAO,MAAA,OAAO,EAAE6B,cAAhB;AAAgC,MAAA,gBAAgB,EAAET,iBAAlD;AAAqE,MAAA,YAAY,EAAEA,iBAAnF;AAAsG,MAAA,GAAG,EAAExB,QAA3G;AAAqH,MAAA,GAAG,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASuC;AAAnI;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA7DM;;GAAMzC,W;;KAAAA,W","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { Song } from './Song';\nimport { Player } from './Player';\nimport { Library } from './Library';\nimport { Nav } from './Nav';\nimport { addAudio, deleteAudio, getAudios } from '../../helpers';\nimport { Data } from '../../data';\n\n\nexport const MusicPlayer = () => {\n\n    // we use Ref\n    const audioRef = useRef(null);\n    // States\n    // State of song being played\n    const [songs, setSongs] = useState([]);\n    const [currentSong, setCurrentSong] = useState(songs); // 1 to 0\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [load, setLoad] = useState(false)\n\n    //State of song time & duration\n    const [songInfo, setSongInfo] = useState({\n        currentTime: 0,\n        duration: 0,\n        animationPercentage: 0,\n    });\n    const [libraryStatus, setLibraryStatus] = useState(false);\n\n    useEffect(() => {\n        setSongs(myAudio())\n    }, [])\n\n    const myAudio = () => {\n        if (typeof window !== \"undefined\") {\n            if (localStorage.getItem(\"audios\")) {\n                return JSON.parse(localStorage.getItem(\"audios\"))\n            }\n        }\n        return []\n    }\n    console.log(currentSong);\n    const timeUpdateHandler = (e) => {\n        const current = e.target.currentTime;\n        const duration = e.target.duration;\n        // Calculate Percentage\n        const roundedCurrent = Math.round(current);\n        const roundedDuration = Math.round(duration);\n        const animation = Math.round((roundedCurrent / roundedDuration) * 100);\n\n        setSongInfo({ ...songInfo, currentTime: current, duration, animationPercentage: animation })\n    };\n\n    const songEndHandler = async () => {\n        let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n        await setCurrentSong(songs[(currentIndex + 1) % songs.length])\n        if (isPlaying) { audioRef.current.play() }\n\n\n    }\n\n\n    return (\n        <div className=\"tester\">\n            <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n            <Song currentSong={currentSong} />\n            <Player setSongs={setSongs} setCurrentSong={setCurrentSong} songs={songs} setSongInfo={setSongInfo} songInfo={songInfo} audioRef={audioRef} setIsPlaying={setIsPlaying} isPlaying={isPlaying} currentSong={currentSong} />\n            <Library libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} setSongs={setSongs} isPlaying={isPlaying} audioRef={audioRef} songs={songs} setCurrentSong={setCurrentSong} />\n            <audio onEnded={songEndHandler} onLoadedMetadata={timeUpdateHandler} onTimeUpdate={timeUpdateHandler} ref={audioRef} src={songs[0].mp3}></audio>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}