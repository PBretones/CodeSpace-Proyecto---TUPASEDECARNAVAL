{"ast":null,"code":"var merge = require('lodash.merge');\n\nvar ffmpeg = require('fluent-ffmpeg');\n\nvar version = require('./package.json').version;\n\nmodule.exports = exports = function (inputs, opts) {\n  return new Audioconcat(inputs, opts);\n};\n\nexports.VERSION = version;\nexports.ffmpeg = ffmpeg;\n\nfunction Audioconcat(inputs, opts) {\n  this.inputs = inputs || [];\n  this.opts = opts || {};\n}\n\nAudioconcat.prototype.options = function (opts) {\n  merge(this.opts, opts);\n  return this;\n};\n\nAudioconcat.prototype.concat = function (file) {\n  if (file) {\n    this.opts.output = file;\n  }\n\n  return concat(this.inputs, this.opts);\n};\n\nfunction concat(inputs, opts) {\n  var filter = 'concat:' + inputs.join('|');\n  var renderer = ffmpeg().input(filter).outputOptions('-acodec copy');\n  var output = opts.output;\n\n  if (output) {\n    return renderer.save(output);\n  }\n\n  return renderer;\n}","map":{"version":3,"sources":["/home/pbretones/Documentos/PBretones/tpdc/proyectofinal/node_modules/audioconcat/index.js"],"names":["merge","require","ffmpeg","version","module","exports","inputs","opts","Audioconcat","VERSION","prototype","options","concat","file","output","filter","join","renderer","input","outputOptions","save"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,gBAAD,CAAP,CAA0BE,OAAxC;;AAEAC,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAG,UAAUC,MAAV,EAAkBC,IAAlB,EAAwB;AACjD,SAAO,IAAIC,WAAJ,CAAgBF,MAAhB,EAAwBC,IAAxB,CAAP;AACD,CAFD;;AAIAF,OAAO,CAACI,OAAR,GAAkBN,OAAlB;AACAE,OAAO,CAACH,MAAR,GAAiBA,MAAjB;;AAEA,SAASM,WAAT,CAAqBF,MAArB,EAA6BC,IAA7B,EAAmC;AACjC,OAAKD,MAAL,GAAcA,MAAM,IAAI,EAAxB;AACA,OAAKC,IAAL,GAAYA,IAAI,IAAI,EAApB;AACD;;AAEDC,WAAW,CAACE,SAAZ,CAAsBC,OAAtB,GAAgC,UAAUJ,IAAV,EAAgB;AAC9CP,EAAAA,KAAK,CAAC,KAAKO,IAAN,EAAYA,IAAZ,CAAL;AACA,SAAO,IAAP;AACD,CAHD;;AAKAC,WAAW,CAACE,SAAZ,CAAsBE,MAAtB,GAA+B,UAAUC,IAAV,EAAgB;AAC7C,MAAIA,IAAJ,EAAU;AACR,SAAKN,IAAL,CAAUO,MAAV,GAAmBD,IAAnB;AACD;;AACD,SAAOD,MAAM,CAAC,KAAKN,MAAN,EAAc,KAAKC,IAAnB,CAAb;AACD,CALD;;AAOA,SAASK,MAAT,CAAgBN,MAAhB,EAAwBC,IAAxB,EAA8B;AAC5B,MAAIQ,MAAM,GAAG,YAAYT,MAAM,CAACU,IAAP,CAAY,GAAZ,CAAzB;AAEA,MAAIC,QAAQ,GAAGf,MAAM,GAClBgB,KADY,CACNH,MADM,EAEZI,aAFY,CAEE,cAFF,CAAf;AAIA,MAAIL,MAAM,GAAGP,IAAI,CAACO,MAAlB;;AACA,MAAIA,MAAJ,EAAY;AACV,WAAOG,QAAQ,CAACG,IAAT,CAAcN,MAAd,CAAP;AACD;;AAED,SAAOG,QAAP;AACD","sourcesContent":["var merge = require('lodash.merge')\nvar ffmpeg = require('fluent-ffmpeg')\nvar version = require('./package.json').version\n\nmodule.exports = exports = function (inputs, opts) {\n  return new Audioconcat(inputs, opts)\n}\n\nexports.VERSION = version\nexports.ffmpeg = ffmpeg\n\nfunction Audioconcat(inputs, opts) {\n  this.inputs = inputs || []\n  this.opts = opts ||Â {}\n}\n\nAudioconcat.prototype.options = function (opts) {\n  merge(this.opts, opts)\n  return this\n}\n\nAudioconcat.prototype.concat = function (file) {\n  if (file) {\n    this.opts.output = file\n  }\n  return concat(this.inputs, this.opts)\n}\n\nfunction concat(inputs, opts) {\n  var filter = 'concat:' + inputs.join('|')\n\n  var renderer = ffmpeg()\n    .input(filter)\n    .outputOptions('-acodec copy')\n\n  var output = opts.output\n  if (output) {\n    return renderer.save(output)\n  }\n\n  return renderer\n}\n"]},"metadata":{},"sourceType":"script"}